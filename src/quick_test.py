#!/usr/bin/env python

# test_setup.py - –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏

print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É...")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
import sys
print(f"‚úÖ Python {sys.version}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º llvmlite
try:
    import llvmlite.ir as ir
    import llvmlite.binding as llvm
    print("‚úÖ llvmlite –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    llvm.initialize()
    llvm.initialize_native_target()
    llvm.initialize_native_asmprinter()
    print("‚úÖ LLVM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
    module = ir.Module("test")
    func_type = ir.FunctionType(ir.IntType(32), [])
    function = ir.Function(module, func_type, name="test")
    
    block = function.append_basic_block("entry")
    builder = ir.IRBuilder(block)
    builder.ret(ir.Constant(ir.IntType(32), 42))
    
    print("‚úÖ LLVM IR —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
    print(str(module))
    
    print("\nüéâ –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç! –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞.")
    
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: pip install llvmlite")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

print(f"\n–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: {sys.path[0]}")
print("–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ!" if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix) else "‚ö†Ô∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ù–ï –∞–∫—Ç–∏–≤–Ω–æ")